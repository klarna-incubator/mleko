:py:mod:`mleko.utils.decorators`
================================

.. py:module:: mleko.utils.decorators

.. autoapi-nested-parse::

   This module provides utility decorators for classes and functions.



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   mleko.utils.decorators.auto_repr
   mleko.utils.decorators.timing



Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.utils.decorators.logger
   mleko.utils.decorators.F


.. py:data:: logger

   A CustomLogger instance that's used throughout the module for logging.

.. py:data:: F

   A TypeVar used as a generic function type throughout the module.

   This TypeVar is designed for type hinting in decorators in the module. It essentially states that F can be
   a function with any number of arguments and any return type.

.. py:function:: auto_repr(init_method: F) -> F

   Decorator for generating a `__repr__` method for a class automatically based on the `__init__` method signature.

   The decorator inspects the `__init__` method's signature and uses parameter names and values to create a `__repr__`
   method that represents the class instance.

   :param init_method: The `__init__` method of the class to be decorated.

   :returns: The wrapped `__init__` method with an automatically generated `__repr__` method.

   .. rubric:: Examples

   >>> from mleko.utils import auto_repr
   >>> class TestClass:
   ...     @auto_repr
   ...     def __init__(self, param1: int, param2: str = "default"):
   ...         self.param1 = param1
   ...         self.param2 = param2
   >>> test_instance = TestClass(1, "test")
   >>> test_instance
   TestClass(param1=1, param2='test')


.. py:function:: timing(func: F) -> F

   A decorator that logs the execution time of the decorated function using a CustomLogger instance.

   .. warning::

      On certain platforms, the timing may be inaccurate due to OS scheduling. This is a known issue with some
      MacOS versions.

   :param func: The function to be decorated.

   :returns: The wrapped function that logs its execution time.

   .. rubric:: Example

   >>> from mleko.utils import timing
   >>> @timing
   ... def test_func():
   ...     pass
   >>> test_func()
   Function: test_func    Timing: 0.0000s


