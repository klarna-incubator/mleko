:py:mod:`mleko.utils.vaex_helpers`
==================================

.. py:module:: mleko.utils.vaex_helpers

.. autoapi-nested-parse::

   This module contains helper functions for working with `vaex` DataFrames.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.utils.vaex_helpers.HashableVaexDataFrame



Functions
~~~~~~~~~

.. autoapisummary::

   mleko.utils.vaex_helpers.get_column
   mleko.utils.vaex_helpers.get_columns
   mleko.utils.vaex_helpers.get_filtered_df
   mleko.utils.vaex_helpers.get_indices



.. py:function:: get_column(df: vaex.DataFrame, column: str) -> vaex.Expression

   Get specified column from a DataFrame as an Expression.

   :param df: The input DataFrame.
   :param column: The name of the desired column.

   :returns: The specified column as an Expression.


.. py:function:: get_columns(df: vaex.DataFrame, columns: list[str]) -> vaex.DataFrame

   Get specified columns from a DataFrame.

   :param df: The input DataFrame.
   :param columns: A list of the names of the desired columns or an Expression.

   :returns: A DataFrame containing only the specified columns.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.utils import get_columns
   >>> df = vaex.from_arrays(column1=[1, 2, 3], column2=[4, 5, 6], column3=[7, 8, 9])
   >>> get_columns(df, ["column1", "column3"]).get_column_names()
   ['column1', 'column3']


.. py:function:: get_filtered_df(df: vaex.DataFrame, filter: vaex.Expression) -> vaex.DataFrame

   Get filtered DataFrame.

   Will return a DataFrame containing only the rows that satisfy the filter. The filter is an Expression that
   evaluates to a boolean value for each row.

   :param df: The input DataFrame.
   :param filter: A boolean Expression used to filter the DataFrame.

   :returns: A DataFrame containing only the rows that satisfy the filter.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.utils import get_filtered_df
   >>> df = vaex.from_arrays(column1=[1, 2, 3], column2=[4, 5, 6], column3=[7, 8, 9])
   >>> get_filtered_df(df, df.column1 > 1)
   #    column1    column2    column3
   0          2          5          8
   1          3          6          9


.. py:function:: get_indices(df: vaex.DataFrame, indices: list[int]) -> vaex.DataFrame

   Get DataFrame containing only the specified indices.

   :param df: The input DataFrame.
   :param indices: A list of the indices to be extracted.

   :returns: A DataFrame containing only the specified indices.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.utils import get_indices
   >>> df = vaex.from_arrays(column1=[1, 2, 3], column2=[4, 5, 6], column3=[7, 8, 9])
   >>> get_indices(df, [0, 2])
   #    column1    column2    column3
   0          1          4          7
   1          3          6          9


.. py:class:: HashableVaexDataFrame

   An immutable hashable wrapper around a `vaex.DataFrame`.

   .. py:attribute:: df
      :type: vaex.DataFrame

      


