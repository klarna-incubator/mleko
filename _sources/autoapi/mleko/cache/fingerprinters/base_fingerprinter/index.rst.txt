:py:mod:`mleko.cache.fingerprinters.base_fingerprinter`
=======================================================

.. py:module:: mleko.cache.fingerprinters.base_fingerprinter

.. autoapi-nested-parse::

   This module contains the abstract base class for creating specialized fingerprinters.

   The fingerprinter is used to generate a unique identifier for the given data, which is used
   to detect changes in the data. The fingerprinter is used by the cache to determine whether
   the data has changed since the last time it was cached.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.cache.fingerprinters.base_fingerprinter.BaseFingerprinter




.. py:class:: BaseFingerprinter

   Bases: :py:obj:`abc.ABC`

   Abstract base class for creating specialized fingerprinters.

   .. py:method:: fingerprint(data: Any) -> str
      :abstractmethod:

      Generate a fingerprint for the given data.

      The fingerprint should be a unique identifier for the given data, across different
      runs of the program, i.e. the fingerprint should be the same for the same data
      regardless of when the program is run.

      :param data: Data that should be fingerprinted.

      :raises NotImplementedError: The method has to be implemented by the subclass.

      :returns: The fingerprint as a hexadecimal string.
      :rtype: str



