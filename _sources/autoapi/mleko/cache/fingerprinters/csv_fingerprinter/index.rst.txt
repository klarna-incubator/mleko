:py:mod:`mleko.cache.fingerprinters.csv_fingerprinter`
======================================================

.. py:module:: mleko.cache.fingerprinters.csv_fingerprinter

.. autoapi-nested-parse::

   The module contains a fingerprinter for CSV files supporting Gzipped and raw CSV files.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.cache.fingerprinters.csv_fingerprinter.CSVFingerprinter




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.cache.fingerprinters.csv_fingerprinter.logger


.. py:data:: logger

   The logger for the module.

.. py:class:: CSVFingerprinter(n_rows: int = 1000)

   Bases: :py:obj:`mleko.cache.fingerprinters.base_fingerprinter.BaseFingerprinter`

   A fingerprinter for CSV files supporting Gzipped and raw CSV files.

   Initialize the CSVFingerprinter.

   .. warning::

      The fingerprint is generated by reading the first `n_rows` of each CSV file. If the
      CSV file is larger than `n_rows`, only the first `n_rows` are read. This means that
      the fingerprint is not unique for the entire CSV file, but only for the first `n_rows`.

   :param n_rows: The number of rows to sample from each CSV file for fingerprinting.

   .. rubric:: Examples

   >>> fingerprinter = CSVFingerprinter(n_rows=1000)
   >>> fingerprinter.fingerprint(["data.csv", "data2.csv"])
   "fingerprint"

   .. py:method:: fingerprint(data: list[str] | list[pathlib.Path]) -> str

      Generate a fingerprint for the given list of CSV files.

      The currently supported file types are `.csv`, `.gz`, and `.csv.gz`.

      :param data: A list of file paths to CSV files.

      :returns: The fingerprint as a hexadecimal string.


   .. py:method:: _fingerprint_csv_file(file_path: pathlib.Path) -> str

      Generate a fingerprint for a single CSV file.

      :param file_path: The file path to a CSV file.

      :raises ValueError: File is unsupported file type.

      :returns: The fingerprint as a hexadecimal string.



