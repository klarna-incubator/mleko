:py:mod:`mleko.dataset.transform.max_abs_scaler_transformer`
============================================================

.. py:module:: mleko.dataset.transform.max_abs_scaler_transformer

.. autoapi-nested-parse::

   Module for the max-abs scaler transformer.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.transform.max_abs_scaler_transformer.MaxAbsScalerTransformer




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.dataset.transform.max_abs_scaler_transformer.logger


.. py:data:: logger

   A module-level logger for the module.

.. py:class:: MaxAbsScalerTransformer(features: list[str] | tuple[str, Ellipsis], cache_directory: str | pathlib.Path = 'data/max-abs-scaler-transformer', cache_size: int = 1)

   Bases: :py:obj:`mleko.dataset.transform.base_transformer.BaseTransformer`

   Transforms features using maximum absolute scaling.

   Initializes the max absolute scaler transformer.

   The max absolute scaler transformer will scale each feature by its maximum absolute value. This transformer
   will not shift/center the data, and thus will not destroy any sparsity.

   .. warning::

      Should only be used with numerical features. There should be no missing values in the features
      or an error will be raised.

   :param features: List of feature names to be used by the transformer.
   :param cache_directory: Directory where the cache will be stored locally.
   :param cache_size: The maximum number of entries to keep in the cache.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.dataset.transform import MaxAbsScalerTransformer
   >>> df = vaex.from_arrays(
   ...     a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
   ...     b=[-1, -2, -3, -4, -5, 0, 1, 2, 3, 4]
   ... )
   >>> ds = DataSchema(
   ...     numerical=["a", "b"],
   ... )
   >>> _, _, df = MaxAbsScalerTransformer(
   ...     features=["a", "b"],
   ... ).fit_transform(ds, df)
   >>> df["a"].tolist()
   [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
   >>> df["b"].tolist()
   [-0.2, -0.4, -0.6, -0.8, -1.0, 0.0, 0.2, 0.4, 0.6, 0.8]

   .. py:method:: _fit(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.ml.MaxAbsScaler]

      Fits the transformer on the given DataFrame.

      :param data_schema: The data schema of the DataFrame.
      :param dataframe: The DataFrame to fit the transformer on.

      :returns: Updated data schema and fitted transformer.


   .. py:method:: _transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.DataFrame]

      Transforms the features in the DataFrame using max-abs scaling.

      :param data_schema: The data schema of the DataFrame.
      :param dataframe: The DataFrame to transform.

      :returns: Updated data schema and transformed DataFrame.


   .. py:method:: _fingerprint() -> Hashable

      Returns the fingerprint of the transformer.

      :returns: A hashable object that uniquely identifies the transformer.



