:py:mod:`mleko.dataset.split.random_splitter`
=============================================

.. py:module:: mleko.dataset.split.random_splitter

.. autoapi-nested-parse::

   The module provides a `RandomSplitter` class for splitting `vaex` DataFrames randomly.

   The splitter can be used to split a `vaex` DataFrame into two parts, with the split being performed randomly. The split
   can be stratified by specifying a column name to use for stratification.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.split.random_splitter.RandomSplitter




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.dataset.split.random_splitter.logger


.. py:data:: logger

   A CustomLogger instance that's used throughout the module for logging.

.. py:class:: RandomSplitter(data_split: tuple[float, float] = (0.8, 0.2), shuffle: bool = True, stratify: str | tuple[str, Ellipsis] | list[str] | None = None, random_state: int | None = 42, cache_directory: str | pathlib.Path = 'data/random-splitter', cache_size: int = 1)

   Bases: :py:obj:`mleko.dataset.split.base_splitter.BaseSplitter`

   A class that handles random splitting of `vaex` DataFrames.

   This class provides a method for splitting a `vaex` DataFrame into two parts, with the split being performed
   randomly. The split can be stratified by specifying a column name to use for stratification.

   Initializes the `RandomSplitter` with the given parameters.

   .. note::

      If `stratify` is not None and the type of the data is string/categorical the feature (s) must not have
      any missing values. Please make sure to handle missing values before using this splitter by either
      dropping the rows with missing values, imputing the missing values, or transforming the target to
      numeric or boolean.

      If multiple features are provided for stratification, there must be at least one row for each unique
      combination of the feature values. Otherwise, the splitter will raise an error.

   :param data_split: A tuple containing the desired split percentages or weights for the train and test dataframes.
                      If the sum of the values is not equal to 1, the values will be normalized. Meaning, if the values are
                      (0.90, 0.20), the resulting split will be (0.818, 0.182).
   :param shuffle: Whether to shuffle the data before splitting.
   :param stratify: Name of the feature(s) to use for stratification. If None, the data will be split without
                    stratification. If a list of features is provided, the data will be stratified based on the unique
                    combinations of the features, i.e., the data will be split such that each unique combination of the
                    features is present in both splits in the same proportion as in the original data.
   :param random_state: The seed to use for random number generation.
   :param cache_directory: The target directory where the split dataframes are to be saved.
   :param cache_size: The maximum number of entries to keep in the cache.

   .. rubric:: Example

   >>> import vaex
   >>> from mleko.data.split import RandomSplitter
   >>> df = vaex.from_arrays(x=[1, 2, 3, 4], y=[0, 1, 1, 0])
   >>> splitter = RandomSplitter(data_split=(0.50, 0.50), shuffle=True, stratify="y")
   >>> df_train, df_test = splitter.split(df)
   >>> df_train
       #    x    y
       0    1    0
       1    3    1
   >>> df_test
       #    x    y
       0    2    1
       1    4    0

   .. py:method:: split(dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[vaex.DataFrame, vaex.DataFrame]

      Split the given dataframe into two parts.

      Splits the dataframe into train and test sets according to the proportions, shuffle,
      stratification, and random state provided during initializing the splitter. Will read from the cache if
      available, unless `force_recompute=True`.

      :param dataframe: The dataframe to be split.
      :param cache_group: The cache group to use.
      :param force_recompute: Whether to force recompute the split, even if the cache is available.
      :param disable_cache: If set to True, disables the cache.

      :returns: A tuple containing the split dataframes.


   .. py:method:: _split(dataframe: vaex.DataFrame) -> tuple[vaex.DataFrame, vaex.DataFrame]

      Split the given dataframe into two parts.

      :param dataframe: The dataframe to be split.

      :returns: A tuple containing the split dataframes.



