:py:mod:`mleko.dataset.split.expression_splitter`
=================================================

.. py:module:: mleko.dataset.split.expression_splitter

.. autoapi-nested-parse::

   The module provides `ExpressionSplitter` class for splitting Vaex DataFrames based on a given expression.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.split.expression_splitter.ExpressionSplitter




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.dataset.split.expression_splitter.logger


.. py:data:: logger

   A module-level logger instance.

.. py:class:: ExpressionSplitter(expression: str, cache_directory: str | pathlib.Path = 'data/expression-splitter', cache_size: int = 1)

   Bases: :py:obj:`mleko.dataset.split.base_splitter.BaseSplitter`

   A class that handles splitting of `vaex` DataFrames based on a given `vaex` expression.

   Initializes the `ExpressionSplitter` with the given parameters.

   The expression should be a valid Vaex expression that evaluates to a boolean
   value. The rows for which the expression evaluates to True will be returned as the first dataframe,
   and the remaining rows will be returned as the second dataframe.

   .. note::

      To filter by a date column, use the `scalar_datetime` function. For example, to filter by a date column
      named `date` and return the rows before `2020-06-01`, use the
      expression `"date < scalar_datetime('2020-06-01')"`.

   :param expression: A valid Vaex expression that evaluates to a boolean value. The rows for which the expression
                      evaluates to True will be returned as the first dataframe, and the remaining rows will be returned
                      as the second dataframe.
   :param cache_directory: The target directory where the split dataframes are to be saved.
   :param cache_size: The maximum number of entries to keep in the cache.

   .. rubric:: Example

   >>> import vaex
   >>> from mleko.data.split import ExpressionSplitter
   >>> df = vaex.from_arrays(x=[1, 2, 3], y=[4, 5, 6])
   >>> splitter = ExpressionSplitter(expression="x > 1")
   >>> df_train, df_test = splitter.split(df)
   >>> df_train
       #    x    y
       0    2    5
       1    3    6
   >>> df_test
       #    x    y
       0    1    4

   .. py:method:: split(dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[vaex.DataFrame, vaex.DataFrame]

      Split the given dataframe into two parts.

      :param dataframe: The dataframe to be split.
      :param cache_group: The cache group to use.
      :param force_recompute: Forces recomputation if True, otherwise reads from the cache if available.
      :param disable_cache: If set to True, disables the cache.

      :returns: A tuple containing the split dataframes.


   .. py:method:: _split(dataframe: vaex.DataFrame) -> tuple[vaex.DataFrame, vaex.DataFrame]

      Split the given dataframe into two parts.

      :param dataframe: The dataframe to be split.

      :returns: A tuple containing the split dataframes.



