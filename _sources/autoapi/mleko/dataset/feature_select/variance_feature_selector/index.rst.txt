:py:mod:`mleko.dataset.feature_select.variance_feature_selector`
================================================================

.. py:module:: mleko.dataset.feature_select.variance_feature_selector

.. autoapi-nested-parse::

   Module for the variance feature selector.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.feature_select.variance_feature_selector.VarianceFeatureSelector




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.dataset.feature_select.variance_feature_selector.logger


.. py:data:: logger

   A module-level logger for the module.

.. py:class:: VarianceFeatureSelector(variance_threshold: float, features: list[str] | tuple[str, Ellipsis] | None = None, ignore_features: list[str] | tuple[str, Ellipsis] | None = None, cache_directory: str | pathlib.Path = 'data/variance-feature-selector', cache_size: int = 1)

   Bases: :py:obj:`mleko.dataset.feature_select.base_feature_selector.BaseFeatureSelector`

   Selects features based on the variance.

   Initializes the feature selector.

   The feature selector will select all features with a variance above the specified threshold.
   The default set of features is all numeric features in the DataFrame.

   .. note:: Only works with numeric features.

   .. warning::

      Make sure to ignore any important features that need to be kept, such as the
      target feature or some identifier.

   :param variance_threshold: The minimum variance allowed for a feature to be selected.
   :param features: List of feature names to be used by the feature selector.
   :param ignore_features: List of feature names to be ignored by the feature selector.
   :param cache_directory: Directory where the cache will be stored locally.
   :param cache_size: The maximum number of entries to keep in the cache.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.dataset.feature_select import VarianceFeatureSelector
   >>> from mleko.utils.vaex_helpers import get_column
   >>> df = vaex.from_arrays(
   ...     a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
   ...     b=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
   ...     c=[1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
   ...     d=["str1", "str2", "str3", "str4", "str5", "str6", "str7", "str8", "str9", "str10"],
   ... )
   >>> ds = DataSchema(
   ...     numerical=["a", "b", "c"],
   ...     categorical=["d"],
   ... )
   >>> selector = VarianceFeatureSelector(
   ...     variance_threshold=0.1,
   ...     ignore_features=["c"],
   ... )
   >>> ds, _, df = selector.fit_transform(ds, df)
   >>> df.get_column_names()
   ['a', 'c', 'd']

   .. py:method:: _fit(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, set[str]]

      Fits the feature selector on the input data.

      :param data_schema: The DataSchema of the DataFrame.
      :param dataframe: The DataFrame to fit the feature selector on.

      :returns: Updated DataSchema and the set of features with a variance below the threshold.


   .. py:method:: _transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.DataFrame]

      Selects features based on the variance.

      :param data_schema: The DataSchema of the DataFrame.
      :param dataframe: The DataFrame to select features from.

      :returns: Updated DataSchema and DataFrame with the selected features.


   .. py:method:: _default_features(data_schema: mleko.dataset.data_schema.DataSchema) -> tuple[str, Ellipsis]

      Returns the default set of features.

      :param data_schema: The DataSchema of the DataFrame.

      :returns: Tuple of default features.


   .. py:method:: _fingerprint() -> Hashable

      Returns a hashable fingerprint of the feature selector.

      Append the variance threshold to the fingerprint.

      :returns: The fingerprint of the feature selector.


   .. py:method:: fit(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[mleko.dataset.data_schema.DataSchema, Any]

      Fits the feature selector to the specified DataFrame, using the cached result if available.

      :param data_schema: DataSchema of the DataFrame.
      :param dataframe: DataFrame to be fitted.
      :param cache_group: The cache group to use.
      :param force_recompute: Whether to force the fitting to be recomputed even if the result is cached.
      :param disable_cache: If set to True, disables the cache.

      :returns: Updated DataSchema and fitted feature selector.


   .. py:method:: transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.DataFrame]

      Extracts the selected features from the DataFrame, using the cached result if available.

      :param data_schema: DataSchema of the DataFrame.
      :param dataframe: DataFrame to be transformed.
      :param cache_group: The cache group to use.
      :param force_recompute: Whether to force the transformation to be recomputed even if the result is cached.
      :param disable_cache: If set to True, disables the cache.

      :raises RuntimeError: If the feature selector has not been fitted.

      :returns: Updated DataSchema and transformed DataFrame.


   .. py:method:: fit_transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[mleko.dataset.data_schema.DataSchema, Any, vaex.DataFrame]

      Fits the feature selector to the specified DataFrame and extracts the selected features from the DataFrame.

      :param data_schema: DataSchema of the DataFrame.
      :param dataframe: DataFrame to be fitted and transformed.
      :param cache_group: The cache group to use.
      :param force_recompute: Whether to force the fitting and transformation to be recomputed even if the result is
                              cached.
      :param disable_cache: If set to True, disables the cache.

      :returns: Tuple of updated DataSchema, fitted feature selector, and transformed DataFrame.


   .. py:method:: _fit_transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, Any, vaex.DataFrame]

      Fits the feature selector to the specified DataFrame and extracts the selected features from the DataFrame.

      :param data_schema: DataSchema of the DataFrame.
      :param dataframe: DataFrame used for feature selection.

      :returns: Tuple of updated DataSchema, fitted feature selector, and transformed DataFrame.


   .. py:method:: _assign_feature_selector(feature_selector: Any) -> None

      Assigns the specified feature selector to the feature_selector attribute.

      Can be overridden by subclasses to assign the feature selector using a different method.

      :param feature_selector: Feature selector to be assigned.


   .. py:method:: _feature_set(data_schema: mleko.dataset.data_schema.DataSchema) -> list[str]

      Returns the list of features to be used by the feature selector.

      It is the default set of features minus the features to be ignored if the `features` argument is None, or the
      list of names in the `features` argument if it is not None.

      :param data_schema: DataSchema of the DataFrame.

      :returns: Sorted list of feature names to be used by the feature selector.



