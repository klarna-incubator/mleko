:py:mod:`mleko.dataset.feature_select.invariance_feature_selector`
==================================================================

.. py:module:: mleko.dataset.feature_select.invariance_feature_selector

.. autoapi-nested-parse::

   Module for the invariance feature selector.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.feature_select.invariance_feature_selector.InvarianceFeatureSelector




Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.dataset.feature_select.invariance_feature_selector.logger


.. py:data:: logger

   A module-level logger for the module.

.. py:class:: InvarianceFeatureSelector(features: list[str] | tuple[str, Ellipsis] | None = None, ignore_features: list[str] | tuple[str, Ellipsis] | None = None, cache_directory: str | pathlib.Path = 'data/invariance-feature-selector', cache_size: int = 1)

   Bases: :py:obj:`mleko.dataset.feature_select.base_feature_selector.BaseFeatureSelector`

   Selects features based on invariance.

   Initializes the feature selector.

   The feature selector will filter out all invariant features. The default set of features
   are all categorical and boolean features in the DataFrame.

   .. note:: Only works with categorical and boolean features.

   .. warning::

      Make sure to ignore any important features that need to be kept, such as the
      target feature or some identifier.

   :param features: List of feature names to be used by the feature selector.
   :param ignore_features: List of feature names to be ignored by the feature selector.
   :param cache_directory: Directory where the cache will be stored locally.
   :param cache_size: The maximum number of entries to keep in the cache.

   .. rubric:: Examples

   >>> import vaex
   >>> from mleko.dataset.feature_select import InvarianceFeatureSelector
   >>> from mleko.utils.vaex_helpers import get_column
   >>> df = vaex.from_arrays(
   ...     a=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
   ...     b=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
   ...     c=[1, 2, 2, 2, 2, 2, 2, 2, 2, 2],
   ...     d=["str1", "str2", "str3", "str4", "str5", "str6", "str7", "str8", "str9", "str10"],
   ... )
   >>> ds = DataSchema(
   ...     numerical=["a", "b", "c"],
   ...     categorical=["d"],
   ... )
   >>> selector = InvarianceFeatureSelector()
   >>> ds, _, df = selector.fit_transform(ds, df)
   >>> df.get_column_names()
   ['a', 'c', 'd']

   .. py:method:: _fit(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, set[str]]

      Fits the feature selector on the input data.

      :param data_schema: The DataSchema of the DataFrame.
      :param dataframe: The DataFrame to fit the feature selector on.

      :returns: Updated DataSchema and the set of invariant features.


   .. py:method:: _transform(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.DataFrame]

      Selects features based on invariance.

      :param data_schema: The DataSchema of the DataFrame.
      :param dataframe: The DataFrame to select features from.

      :returns: The DataFrame with the selected features.


   .. py:method:: _default_features(data_schema: mleko.dataset.data_schema.DataSchema) -> tuple[str, Ellipsis]

      Returns the default set of features.

      :param data_schema: The DataSchema of the DataFrame.

      :returns: Tuple of default features.


   .. py:method:: _fingerprint() -> Hashable

      Returns the fingerprint of the feature selector.

      Appends the missing rate threshold to the fingerprint.

      :returns: The fingerprint of the feature selector.



