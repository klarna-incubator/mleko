:py:mod:`mleko.dataset.filter.base_filter`
==========================================

.. py:module:: mleko.dataset.filter.base_filter

.. autoapi-nested-parse::

   The module containing the base class for data filter.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.filter.base_filter.BaseFilter




.. py:class:: BaseFilter(cache_directory: str | pathlib.Path, cache_size: int)

   Bases: :py:obj:`mleko.cache.lru_cache_mixin.LRUCacheMixin`, :py:obj:`abc.ABC`

   Abstract base class for data filter.

   Will cache the filtered dataframes in the output directory.

   Initializes the `BaseFilter` with an output directory.

   :param cache_directory: The target directory where the filtered dataframes are to be saved.
   :param cache_size: The maximum number of cache entries.

   .. py:method:: filter(data_schema: mleko.dataset.data_schema.DataSchema, dataframe: vaex.DataFrame, cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> vaex.DataFrame
      :abstractmethod:

      Abstract method to filter the given dataframe.

      :param data_schema: The data schema to be used for filtering.
      :param dataframe: The dataframe to be filtered.
      :param cache_group: The cache group to use.
      :param force_recompute: Forces recomputation if True, otherwise reads from the cache if available.
      :param disable_cache: If set to True, disables the cache.

      :raises NotImplementedError: If the method is not implemented.



