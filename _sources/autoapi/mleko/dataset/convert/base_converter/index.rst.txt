:py:mod:`mleko.dataset.convert.base_converter`
==============================================

.. py:module:: mleko.dataset.convert.base_converter

.. autoapi-nested-parse::

   The module containing the base class for data converter.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.dataset.convert.base_converter.BaseConverter




.. py:class:: BaseConverter(cache_directory: str | pathlib.Path, cache_size: int)

   Bases: :py:obj:`mleko.cache.lru_cache_mixin.LRUCacheMixin`, :py:obj:`abc.ABC`

   Abstract base class for data converter.

   Initialize the `BaseConverter`.

   The `cache_size` is the maximum number of cache entries, and the cache will be cleared if the number of
   entries exceeds this value.

   :param cache_directory: The directory to store the cache in.
   :param cache_size: The maximum number of cache entries.

   .. py:method:: convert(file_paths: list[pathlib.Path] | list[str], cache_group: str | None = None, force_recompute: bool = False, disable_cache: bool = False) -> tuple[mleko.dataset.data_schema.DataSchema, vaex.DataFrame]
      :abstractmethod:

      Abstract method to convert the input file paths to the desired output format.

      :param file_paths: A list of input file paths to be converted.
      :param cache_group: The cache group to use.
      :param force_recompute: If set to True, forces recomputation and ignores the cache.
      :param disable_cache: If set to True, disables the cache.

      :raises NotImplementedError: If the method is not implemented.



