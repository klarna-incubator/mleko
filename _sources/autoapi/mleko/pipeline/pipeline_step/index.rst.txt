:py:mod:`mleko.pipeline.pipeline_step`
======================================

.. py:module:: mleko.pipeline.pipeline_step

.. autoapi-nested-parse::

   This module defines the abstract base class for pipeline steps in a data processing pipeline.

   The module provides a standard interface for implementing data processing steps as part of a larger pipeline,
   via the `PipelineStep` abstract base class. Each `PipelineStep` subclass should have a specific purpose and
   should be able to run independently or as part of the pipeline.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.pipeline.pipeline_step.PipelineStep
   mleko.pipeline.pipeline_step.FitTransformPipelineStep



Functions
~~~~~~~~~

.. autoapisummary::

   mleko.pipeline.pipeline_step.validate_typeddict



Attributes
~~~~~~~~~~

.. autoapisummary::

   mleko.pipeline.pipeline_step.logger
   mleko.pipeline.pipeline_step.T
   mleko.pipeline.pipeline_step.TypedDictType
   mleko.pipeline.pipeline_step.FitTransformAction


.. py:data:: logger

   The logger for the module.

.. py:data:: T

   Type variable for generic type annotations.

.. py:data:: TypedDictType

   Type variable for TypedDict type annotations.

.. py:function:: validate_typeddict(data: dict[str, Any], typeddict: type[TypedDictType]) -> None

   Validates that all keys defined in the TypedDict are present in the data dict.

   This function checks for the presence of all keys, including those marked as Optional.
   The presence of a key is mandatory, but the value can be None if the key is Optional.

   :param data: The data dictionary to validate.
   :param typeddict: The TypedDict class against which to validate the data.

   :raises ValueError: If the data is missing required keys or has extra keys not defined in the TypedDict.


.. py:class:: PipelineStep(inputs: dict[str, Any] | TypedDictType, outputs: dict[str, str] | TypedDictType, cache_group: str | None)

   Bases: :py:obj:`abc.ABC`

   Base class for all pipeline steps, ensuring the standardized interface for performing data processing operations.

   Descendants of this class must implement the `execute` method, which carries out the data processing operation
   related to the step. Additionally, they must implement the `_get_input_model` and `_get_output_model` methods,
   which dynamically determine the TypedDict models to use for validation.

   Initialize a new PipelineStep with the provided input and output keys.

   :param action: The action to perform, such as "fit", "transform", or "fit_transform".
   :param inputs: Input data required for this step's processing operation.
   :param outputs: Output data generated by this step's processing operation.
   :param cache_group: The cache group to use.

   .. py:method:: execute(data_container: mleko.pipeline.data_container.DataContainer, force_recompute: bool, disable_cache: bool) -> mleko.pipeline.data_container.DataContainer
      :abstractmethod:

      Execute the data processing operation associated with this pipeline step.

      The `execute` method is the main entry point for the data processing operation associated with this step.
      It receives a `DataContainer` instance as input, containing the data to be processed by this step.
      The method should perform the processing operation and return the processed data as a `DataContainer` instance.

      :param data_container: Input data for this step's processing operation.
      :param force_recompute: Whether to force the step to recompute its output, even if it already exists.
      :param disable_cache: If set to True, disables the cache.

      :raises NotImplementedError: Must be implemented by subclass.


   .. py:method:: _get_input_model() -> type[TypedDictType]
      :abstractmethod:

      Dynamically determine the TypedDict model to use for validation.

      :returns: The TypedDict model to use for validation.


   .. py:method:: _get_output_model() -> type[TypedDictType]
      :abstractmethod:

      Dynamically determine the TypedDict model to use for validation.

      :returns: The TypedDict model to use for validation.


   .. py:method:: _validate_and_get_input(input_object: str | T, expected_type: type[T], data_container: mleko.pipeline.data_container.DataContainer, is_optional: bool = False) -> T

      Validate and get the input from the data container or as a direct value.

      If the input is a string, it is treated as a key to look up in the data container. If it is not a string,
      it is treated as the input value itself. The method validates the input type, and returns the input value
      if it is valid.

      .. warning::

         This method does not handle subscripted types, such as `List[str]`. It only handles simple types. If you
         need to validate a subscripted type, you should do so manually after retrieving the input value from this
         method.

      :param input_object: The input key or value to validate and retrieve.
      :param expected_type: The expected type of the input value.
      :param data_container: The data container containing the input data.
      :param is_optional: Whether the input is optional.

      :raises ValueError: If the input is invalid or not found in the data container.

      :returns: The input value if it is valid, or None if it is optional and not found in the data container.


   .. py:method:: _validate_inputs() -> None

      Validates the step's inputs using TypeDict models.

      :raises ValueError: If the inputs are not a dictionary.


   .. py:method:: _validate_outputs() -> None

      Validates the step's outputs using TypeDict models.

      :raises ValueError: If the outputs are not a dictionary.



.. py:data:: FitTransformAction

   Type alias for the action to perform, either "fit", "transform", or "fit_transform".

.. py:class:: FitTransformPipelineStep(action: FitTransformAction, inputs: dict[str, Any] | TypedDictType, outputs: dict[str, str] | TypedDictType, cache_group: str | None)

   Bases: :py:obj:`PipelineStep`

   Base class for all pipeline steps, ensuring the standardized interface for performing data processing operations.

   Specialized for steps that perform actions "fit", "transform", or "fit_transform". Descendants of this class must
   implement the `execute` method, which carries out the data processing operation related to the step. Additionally,
   they must implement the `_get_input_model` and `_get_output_model` methods, which dynamically determine the
   TypedDict models to use for validation based on the action to be performed.

   Initialize a new PipelineStep with the provided input and output keys.

   :param action: The action to perform, either "fit", "transform", or "fit_transform".
   :param inputs: Input data required for this step's processing operation.
   :param outputs: Output data generated by this step's processing operation.
   :param cache_group: The cache group to use.

   :raises ValueError: If the action is not one of "fit", "transform", or "fit_transform".

   .. py:attribute:: _action
      :type: FitTransformAction

      

   .. py:method:: execute(data_container: mleko.pipeline.data_container.DataContainer, force_recompute: bool, disable_cache: bool) -> mleko.pipeline.data_container.DataContainer
      :abstractmethod:

      Execute the data processing operation associated with this pipeline step.

      The `execute` method is the main entry point for the data processing operation associated with this step.
      It receives a `DataContainer` instance as input, containing the data to be processed by this step.
      The method should perform the processing operation and return the processed data as a `DataContainer` instance.

      :param data_container: Input data for this step's processing operation.
      :param force_recompute: Whether to force the step to recompute its output, even if it already exists.
      :param disable_cache: If set to True, disables the cache.

      :raises NotImplementedError: Must be implemented by subclass.


   .. py:method:: _get_input_model() -> type[TypedDictType]
      :abstractmethod:

      Dynamically determine the TypedDict model to use for validation.

      :returns: The TypedDict model to use for validation.


   .. py:method:: _get_output_model() -> type[TypedDictType]
      :abstractmethod:

      Dynamically determine the TypedDict model to use for validation.

      :returns: The TypedDict model to use for validation.


   .. py:method:: _validate_and_get_input(input_object: str | T, expected_type: type[T], data_container: mleko.pipeline.data_container.DataContainer, is_optional: bool = False) -> T

      Validate and get the input from the data container or as a direct value.

      If the input is a string, it is treated as a key to look up in the data container. If it is not a string,
      it is treated as the input value itself. The method validates the input type, and returns the input value
      if it is valid.

      .. warning::

         This method does not handle subscripted types, such as `List[str]`. It only handles simple types. If you
         need to validate a subscripted type, you should do so manually after retrieving the input value from this
         method.

      :param input_object: The input key or value to validate and retrieve.
      :param expected_type: The expected type of the input value.
      :param data_container: The data container containing the input data.
      :param is_optional: Whether the input is optional.

      :raises ValueError: If the input is invalid or not found in the data container.

      :returns: The input value if it is valid, or None if it is optional and not found in the data container.


   .. py:method:: _validate_inputs() -> None

      Validates the step's inputs using TypeDict models.

      :raises ValueError: If the inputs are not a dictionary.


   .. py:method:: _validate_outputs() -> None

      Validates the step's outputs using TypeDict models.

      :raises ValueError: If the outputs are not a dictionary.



