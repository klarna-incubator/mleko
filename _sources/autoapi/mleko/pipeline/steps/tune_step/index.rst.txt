:py:mod:`mleko.pipeline.steps.tune_step`
========================================

.. py:module:: mleko.pipeline.steps.tune_step

.. autoapi-nested-parse::

   Module containing the TuneStep class.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mleko.pipeline.steps.tune_step.TuneStepInputType
   mleko.pipeline.steps.tune_step.TuneStepOutputType
   mleko.pipeline.steps.tune_step.TuneStep




.. py:class:: TuneStepInputType

   Bases: :py:obj:`typing_extensions.TypedDict`

   The input type of the TuneStep.

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: data_schema
      :type: Union[str, mleko.dataset.data_schema.DataSchema]

      DataSchema or the key for the DataSchema to be used for hyperparameter tuning.

   .. py:attribute:: dataframe
      :type: Union[str, vaex.DataFrame]

      DataFrame or the key for the DataFrame to be used for hyperparameter tuning.

   .. py:method:: clear()

      D.clear() -> None.  Remove all items from D.


   .. py:method:: copy()

      D.copy() -> a shallow copy of D


   .. py:method:: get()

      Return the value for key if key is in the dictionary, else default.


   .. py:method:: items()

      D.items() -> a set-like object providing a view on D's items


   .. py:method:: keys()

      D.keys() -> a set-like object providing a view on D's keys


   .. py:method:: pop()

      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

      If the key is not found, return the default if given; otherwise,
      raise a KeyError.


   .. py:method:: popitem()

      Remove and return a (key, value) pair as a 2-tuple.

      Pairs are returned in LIFO (last-in, first-out) order.
      Raises KeyError if the dict is empty.


   .. py:method:: setdefault()

      Insert key with a value of default if key is not in the dictionary.

      Return the value for key if key is in the dictionary, else default.


   .. py:method:: update()

      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
      In either case, this is followed by: for k in F:  D[k] = F[k]


   .. py:method:: values()

      D.values() -> an object providing a view on D's values



.. py:class:: TuneStepOutputType

   Bases: :py:obj:`typing_extensions.TypedDict`

   The output type of the TuneStep.

   Initialize self.  See help(type(self)) for accurate signature.

   .. py:attribute:: hyperparameters
      :type: str

      The key for the best hyperparameters after tuning.

   .. py:attribute:: score
      :type: str

      The key for the best objective score after tuning.

   .. py:attribute:: metadata
      :type: str

      The key for the optional metadata object after tuning.

   .. py:method:: clear()

      D.clear() -> None.  Remove all items from D.


   .. py:method:: copy()

      D.copy() -> a shallow copy of D


   .. py:method:: get()

      Return the value for key if key is in the dictionary, else default.


   .. py:method:: items()

      D.items() -> a set-like object providing a view on D's items


   .. py:method:: keys()

      D.keys() -> a set-like object providing a view on D's keys


   .. py:method:: pop()

      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.

      If the key is not found, return the default if given; otherwise,
      raise a KeyError.


   .. py:method:: popitem()

      Remove and return a (key, value) pair as a 2-tuple.

      Pairs are returned in LIFO (last-in, first-out) order.
      Raises KeyError if the dict is empty.


   .. py:method:: setdefault()

      Insert key with a value of default if key is not in the dictionary.

      Return the value for key if key is in the dictionary, else default.


   .. py:method:: update()

      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
      In either case, this is followed by: for k in F:  D[k] = F[k]


   .. py:method:: values()

      D.values() -> an object providing a view on D's values



.. py:class:: TuneStep(tuner: mleko.model.tune.base_tuner.BaseTuner, inputs: TuneStepInputType, outputs: TuneStepOutputType, cache_group: str | None = None)

   Bases: :py:obj:`mleko.pipeline.pipeline_step.PipelineStep`

   Pipeline step for hyperparameter tuning.

   Initialize the TuneStep with the specified tuner.

   :param tuner: The tuner used for hyperparameter tuning.
   :param inputs: A dictionary of input keys following the `TuneStepInputType` schema.
   :param outputs: A dictionary of output keys following the `TuneStepOutputType` schema.
   :param cache_group: The cache group to use.

   .. py:attribute:: _inputs
      :type: TuneStepInputType

      

   .. py:attribute:: _outputs
      :type: TuneStepOutputType

      

   .. py:method:: execute(data_container: mleko.pipeline.data_container.DataContainer, force_recompute: bool, disable_cache: bool) -> mleko.pipeline.data_container.DataContainer

      Perform hyperparameter tuning.

      :param data_container: Contains the input.
      :param force_recompute: Whether to force the step to recompute its output, even if it already exists.
      :param disable_cache: If set to True, disables the cache.

      :returns: A DataContainer containing the output of the tuning step. It contains the best hyperparameters, the best
                objective score, and an optional metadata object.


   .. py:method:: _get_input_model() -> type[TuneStepInputType]

      Get the input model for the TuneStep.

      :returns: The input model for the TuneStep.


   .. py:method:: _get_output_model() -> type[TuneStepOutputType]

      Get the output model for the TuneStep.

      :returns: The output model for the TuneStep.


   .. py:method:: _validate_and_get_input(input_object: str | T, expected_type: type[T], data_container: mleko.pipeline.data_container.DataContainer, is_optional: bool = False) -> T

      Validate and get the input from the data container or as a direct value.

      If the input is a string, it is treated as a key to look up in the data container. If it is not a string,
      it is treated as the input value itself. The method validates the input type, and returns the input value
      if it is valid.

      .. warning::

         This method does not handle subscripted types, such as `List[str]`. It only handles simple types. If you
         need to validate a subscripted type, you should do so manually after retrieving the input value from this
         method.

      :param input_object: The input key or value to validate and retrieve.
      :param expected_type: The expected type of the input value.
      :param data_container: The data container containing the input data.
      :param is_optional: Whether the input is optional.

      :raises ValueError: If the input is invalid or not found in the data container.

      :returns: The input value if it is valid, or None if it is optional and not found in the data container.


   .. py:method:: _validate_inputs() -> None

      Validates the step's inputs using TypeDict models.

      :raises ValueError: If the inputs are not a dictionary.


   .. py:method:: _validate_outputs() -> None

      Validates the step's outputs using TypeDict models.

      :raises ValueError: If the outputs are not a dictionary.



